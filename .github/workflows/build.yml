name: Build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - name: Configure sccache-cache
      run: |
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.4

    - name: Prepare
      run: |
        sudo apt install -y cmake libuv1-dev liblz4-dev liblzma-dev libdouble-conversion-dev libdwarf-dev libunwind-dev
        sudo apt install -y libaio-dev libgflags-dev libgoogle-glog-dev libgtest-dev libgmock-dev clang-format-14 clang-14 clang-tidy-14 lld-14
        sudo apt install -y libgoogle-perftools-dev google-perftools libssl-dev gcc-12 g++-12 libboost-all-dev meson rustc cargo
        wget https://github.com/apple/foundationdb/releases/download/7.1.61/foundationdb-clients_7.1.61-1_amd64.deb && sudo dpkg -i foundationdb-clients_7.1.61-1_amd64.deb
        git clone https://github.com/libfuse/libfuse.git libfuse -b fuse-3.16.2 --depth 1 && mkdir libfuse/build && cd libfuse/build && meson setup .. && ninja && sudo ninja install && cd ../.. && rm -rf libfuse
        git submodule update --init --recursive
        ./patches/apply.sh

    - name: Build
      run: |
        cargo build --release
        cmake -S . -B build -DCMAKE_CXX_COMPILER=clang++-14 -DCMAKE_C_COMPILER=clang-14 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        cmake --build build -j 8

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 3fs-binaries
        path: |
          build/bin/monitor_collector_main
          build/bin/admin_cli
          build/bin/mgmtd_main
          build/bin/meta_main
          build/bin/storage_main
          build/bin/hf3fs_fuse_main
          build/compile_commands.json
  
  release:
    runs-on: ubuntu-22.04

    steps:
    - name: Mkdir
      run: |
        mkdir 3fs-binaries

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: 3fs-binaries
        path: ./3fs-binaries

    - name: Display structure of downloaded files
      run: ls -R ./3fs-binaries

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}
        release_name: 3fs-binaries
        draft: false
        prerelease: false
    
    - name: Packagke artifacts
      run: |
        tar -cvf 3fs-binaries.tar 3fs-binaries

    - name: Upload Docker image to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./3fs-binaries.tar
        asset_name: 3fs-binaries.tar
        asset_content_type: application/x-tar
